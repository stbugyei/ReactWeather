{"version":3,"sources":["animated/cloudy.svg","animated/day.svg","animated/thunder.svg","animated/rainy-1.svg","animated/rainy-3.svg","animated/snowy-3.svg","animated/cloudy-day-2.svg","animated/cloudy-day-1.svg","images/rain.jpg","images/clear2.jpg","images/mist.jpg","images/cloud.jpeg","images/snow.jpg","images/storm.jpg","component/Moment.js","component/Geolocation.js","component/DisplayInfo.js","component/TemperatureChart.js","component/DisplayForecast.js","component/Form.js","component/Spinner.js","component/FetchWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Moment","forecast","useState","curTime","setCurTime","timezoneInMinutes","city","timezone","currentTime","moment","utcOffset","format","useEffect","reset","setInterval","clearInterval","withRouter","history","useHistory","DayOne","dailyForecast","i","list","length","push","fiveDayForecast","icon","weather","sunrise","unix","sunset","className","div","initial","opacity","scale","animate","exit","transition","type","duration","ease","name","country","style","time","src","Thunder","Drizzle","Rain","Snow","Miscellaneous","Clear","FewClouds","ScatteredClouds","OvercastClouds","alt","pStyle1","description","Math","round","main","temp","fontSize","color","fontWeight","temp_max","temp_min","onClick","marginTop","textTransform","textShadow","fontFamily","width","padding","feels_like","wind","speed","humidity","deg","toLocaleString","visibility","pressure","TemperatureChart","data","labels","dateArr","map","dt_txt","date","series","minTempArr","minTemp","maxTempArr","maxTemp","marginBottom","backgroundColor","options","height","showArea","colors","ShowForecast","key","item","textAlign","paddingTop","Form","id","htmlFor","placeholder","autoComplete","Spinner","API_KEY","FORECAST_URL","location","useLocation","setForecast","setIcon","condition","setCondition","error","setError","fetchCurrentLocation","latitude","longitude","a","fetch","api_call","json","result","navigator","geolocation","getCurrentPosition","position","coords","e","console","log","showGeoLocation","requestWeatherDetail","preventDefault","query","target","value","weatherFeed","responseForecast","message","backgroundImage","Cloud","Storm","Mist","onSubmit","Object","keys","exitBeforeEnter","pathname","exact","path","errormsg","margin","App","forceRefresh","basename","process","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.16369e1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloudy.ad789581.svg\";","module.exports = __webpack_public_path__ + \"static/media/day.7f93fbdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.7142c78b.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-1.f134a51c.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-3.c17e7a5d.svg\";","module.exports = __webpack_public_path__ + \"static/media/snowy-3.b6eea2cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day-2.b931d84d.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day-1.80a5d865.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.b5956c7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear2.4367044c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mist.04e85ccd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.70c102fe.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/snow.61d1f99b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.75f9c176.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\n\r\n\r\nconst Moment = (forecast) => {\r\n\r\n    const [curTime, setCurTime] = useState();\r\n\r\n    const timezone = forecast.city.timezone;\r\n    const timezoneInMinutes = timezone / 60;\r\n    const currentTime = moment().utcOffset(timezoneInMinutes).format(\" ddd, MMM D YYYY | h:mm:ss a\");\r\n\r\n    useEffect(() => {\r\n        const reset = setInterval(() => setCurTime(currentTime), 1000)\r\n        return () => {\r\n            clearInterval(reset);\r\n        }\r\n    }, [curTime, currentTime]);\r\n    \r\n    return (\r\n        <>\r\n            <h6>{currentTime}</h6>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Moment;\r\n\r\n","import React from 'react'\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport Moment from './Moment'\r\nimport moment from 'moment';\r\nimport Thunder from '../animated/thunder.svg'\r\nimport Drizzle from '../animated/rainy-1.svg'\r\nimport Rain from '../animated/rainy-3.svg'\r\nimport Snow from '../animated/snowy-3.svg'\r\nimport Clear from '../animated/day.svg'\r\nimport Miscellaneous from '../animated/cloudy.svg'\r\nimport FewClouds from '../animated/cloudy-day-2.svg'\r\nimport ScatteredClouds from '../animated/cloudy-day-1.svg'\r\nimport OvercastClouds from '../animated/cloudy.svg'\r\n\r\n\r\n\r\nconst Geolocation = (forecast) => {\r\n    //console.log(forecast)\r\n\r\n    //======= Navigation functions =========\r\n\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/displayinfo\");\r\n    }\r\n\r\n    //======= Navigation functions =========\r\n    const fiveDays = () => {\r\n        history.push(\"/displayforecast\");\r\n    }\r\n\r\n    //======= Extracting the five days weather data  =========\r\n\r\n    const fiveDayForecast = () => {\r\n        let dailyForecast = []\r\n        for (let i = 0; i < forecast.list.length; i += 8) {\r\n            dailyForecast.push(forecast.list[i])\r\n        }\r\n        return dailyForecast\r\n    }\r\n\r\n    const DayOne = fiveDayForecast()[0];\r\n\r\n    let icon = (DayOne.weather[0].icon);\r\n    let sunrise = (moment.unix(forecast.city.sunrise).format(\"hh:mm a\"))\r\n    let sunset = (moment.unix(forecast.city.sunset).format(\"hh:mm a\"))\r\n\r\n    /* ========= Replacing the default icons with animated icons from amcharts =========*/\r\n\r\n    const getImageType = () => {\r\n\r\n        if (icon === '11d' || icon === '11n') {\r\n            return Thunder;\r\n        }\r\n\r\n        else if (icon === '09d' || icon === '09n') {\r\n            return Drizzle;\r\n        }\r\n\r\n        else if (icon === '10d' || icon === '10n') {\r\n            return Rain;\r\n        }\r\n\r\n        else if (icon === '13d' || icon === '13n') {\r\n            return Snow;\r\n        }\r\n\r\n        else if (icon === '50d' || icon === '50n') {\r\n            return Miscellaneous;\r\n        }\r\n\r\n        else if (icon === '01d' || icon === '01n') {\r\n            return Clear;\r\n        }\r\n\r\n        else if (icon === '02d' || icon === '02n') {\r\n            return FewClouds;\r\n        }\r\n\r\n        else if (icon === '03d' || icon === '03n') {\r\n            return ScatteredClouds;\r\n        }\r\n\r\n        else if (icon === '04d' || icon === '04n') {\r\n            return OvercastClouds;\r\n        }\r\n\r\n        else {\r\n            return Clear;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className='geographic-loc'>\r\n            <motion.div\r\n                initial={{ opacity: 0, scale: 1 }}\r\n                animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 1, scale: 1 }}\r\n                transition={{ type: \"tween\", duration: 0.5, ease: \"easeIn\" }}\r\n            >\r\n                <section className=\"upper-section\">\r\n\r\n                    <div className='country-city'>\r\n                        <h1>{forecast.city.name}, {forecast.city.country}</h1>\r\n                        <div style={time}><Moment {...forecast} /></div>\r\n                    </div>\r\n\r\n                    <div className='weather-wrapper_img'>\r\n                        <img className='avatar' src={getImageType()} alt='img' />\r\n                        <h4 style={pStyle1}> {(DayOne.weather[0].description)}</h4>\r\n                    </div>\r\n\r\n                    <div className='temperature-wrapper'>\r\n                        <div className=\"temperature-content\">\r\n                            <div className=\"temperature-main\">\r\n                                <h1>{Math.round(DayOne.main.temp)}<sup>°</sup>C</h1>\r\n                            </div>\r\n\r\n                            <div className=\"temperature-subs\">\r\n                                <h4 style={{ fontSize: '14px', color: 'rgb(145, 22, 22)', fontWeight: '600' }}> max </h4>\r\n                                <h4> {Math.round(DayOne.main.temp_max)}°c</h4>\r\n                                <h4 style={{ fontSize: '14px', color: 'rgb(145, 22, 22)', fontWeight: '600' }}> min</h4>\r\n                                <h4>{Math.round(DayOne.main.temp_min)}°c</h4>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sun\">\r\n                            <div className=\"sun-content\">\r\n                                <p><i className=\"wi wi-sunrise\"></i>{sunrise}</p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <p><i className=\"wi wi-sunset\"></i>{sunset}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                \r\n                <div className=\"btn-control\">\r\n                    <>\r\n                        <span className='btn-control__arrow '><i className=\"fas fa-arrow-right\"></i></span>\r\n                        <span><button type=\"button\" onClick={handleClick} className='btn-control__info'><h4>Get Details</h4></button></span>\r\n                    </>\r\n\r\n                    <>\r\n                        <span><button type=\"button\" onClick={fiveDays} className='btn-control__info'><h4>Get 5-Day Forecast</h4></button></span>\r\n                        <span className='btn-control__arrow'><i className=\"fas fa-arrow-left\"></i></span>\r\n                    </>\r\n                </div>\r\n            </motion.div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withRouter(Geolocation);\r\n\r\n\r\nconst pStyle1 = {\r\n    marginTop: '-19px',\r\n    textTransform: 'capitalize',\r\n    fontSize: '22px',\r\n    fontWeight: 'bold',\r\n    color: '#fff',\r\n    textShadow: '0 3px 6px rgb(59, 62, 65)',\r\n};\r\n\r\nconst time = {\r\n    fontFamily: 'Poppins',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    color: '#fff',\r\n    textShadow: '0 3px 6px rgba(0, 0, 0, .16), 0 1px 2px rgba(0, 0, 0, .23)',\r\n};\r\n\r\n","import React from 'react'\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport Moment from './Moment'\r\nimport moment from 'moment';\r\nimport Thunder from '../animated/thunder.svg'\r\nimport Drizzle from '../animated/rainy-1.svg'\r\nimport Rain from '../animated/rainy-3.svg'\r\nimport Snow from '../animated/snowy-3.svg'\r\nimport Clear from '../animated/day.svg'\r\nimport Miscellaneous from '../animated/cloudy.svg'\r\nimport FewClouds from '../animated/cloudy-day-2.svg'\r\nimport ScatteredClouds from '../animated/cloudy-day-1.svg'\r\nimport OvercastClouds from '../animated/cloudy.svg'\r\n\r\n\r\n\r\nconst DisplayInfo = (forecast) => {\r\n    //console.log(forecast)\r\n\r\n    //======= Navigation functions =========\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/displayforecast\");\r\n    }\r\n\r\n    //======= Extracting the five days weather data  =========\r\n    const fiveDayForecast = () => {\r\n        let dailyForecast = []\r\n        for (let i = 0; i < forecast.list.length; i += 8) {\r\n            dailyForecast.push(forecast.list[i])\r\n        }\r\n        return dailyForecast\r\n    }\r\n\r\n    const DayOne = fiveDayForecast()[0];\r\n\r\n    let icon = (DayOne.weather[0].icon);\r\n    let sunrise = (moment.unix(forecast.city.sunrise).format(\"hh:mm a\"))\r\n    let sunset = (moment.unix(forecast.city.sunset).format(\"hh:mm a\"))\r\n\r\n    /* ======== Replacing the default icons with animated icons from amcharts =========*/\r\n\r\n    const getImageType = () => {\r\n\r\n        if (icon === '11d' || icon === '11n') {\r\n            return Thunder;\r\n        }\r\n\r\n        else if (icon === '09d' || icon === '09n') {\r\n            return Drizzle;\r\n        }\r\n\r\n        else if (icon === '10d' || icon === '10n') {\r\n            return Rain;\r\n        }\r\n\r\n        else if (icon === '13d' || icon === '13n') {\r\n            return Snow;\r\n        }\r\n\r\n        else if (icon === '50d' || icon === '50n') {\r\n            return Miscellaneous;\r\n        }\r\n\r\n        else if (icon === '01d' || icon === '01n') {\r\n            return Clear;\r\n        }\r\n\r\n        else if (icon === '02d' || icon === '02n') {\r\n            return FewClouds;\r\n        }\r\n\r\n        else if (icon === '03d' || icon === '03n') {\r\n            return ScatteredClouds;\r\n        }\r\n\r\n        else if (icon === '04d' || icon === '04n') {\r\n            return OvercastClouds;\r\n        }\r\n\r\n        else {\r\n            return Clear;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className='display-information'>\r\n            <motion.div\r\n                initial={{ opacity: 0, scale: 1 }}\r\n                animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 1, scale: 1 }}\r\n                transition={{ type: \"tween\", duration: 0.5, ease: \"easeIn\" }}\r\n            >\r\n                <section className=\"upper-section\">\r\n\r\n                    <div className='country-city'>\r\n                        <h1>{forecast.city.name}, {forecast.city.country}</h1>\r\n                        <div style={time}><Moment {...forecast} /></div>\r\n                    </div>\r\n\r\n                    <div className='weather-wrapper_img'>\r\n                        <img className='avatar' src={getImageType()} alt='img' />\r\n                        <h4 style={pStyle1}> {(DayOne.weather[0].description)}</h4>\r\n                    </div>\r\n\r\n                    <div className='temperature-wrapper'>\r\n\r\n                        <div className=\"temperature-content\">\r\n                            <div className=\"temperature-main\">\r\n                                <h1>{Math.round(DayOne.main.temp)}<sup>°</sup>C</h1>\r\n                            </div>\r\n\r\n                            <div className=\"temperature-subs\">\r\n                                <h4 style={{ fontSize: '14px', color: 'rgb(145, 22, 22)', fontWeight: '600' }}> max </h4>\r\n                                <h4> {Math.round(DayOne.main.temp_max)}°c</h4>\r\n                                <h4 style={{ fontSize: '14px', color: 'rgb(145, 22, 22)', fontWeight: '600' }}> min</h4>\r\n                                <h4>{Math.round(DayOne.main.temp_min)}°c</h4>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sun\">\r\n                            <div className=\"sun-content\">\r\n                                <p><i className=\"wi wi-sunrise\"></i>{sunrise}</p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <p><i className=\"wi wi-sunset\"></i>{sunset}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n                <div style={{ width: '100%', padding: '0px 10px' }}>\r\n                    <span className='btn-direction'><i className=\"fas fa-arrow-down\"></i></span>\r\n                    <span><button type=\"button\" onClick={handleClick} className='btn-info'><h4>Get 5-Day Forecast</h4></button></span>\r\n                </div>\r\n\r\n                <section className=\"lower-Section\">\r\n                    <div className='lower-section__content'>\r\n                        <div>  <p>feels like</p> <i className=\"wi wi-thermometer\"></i> {Math.round(DayOne.main.feels_like)}°c </div>\r\n                        <div>  <p className='lower-section__item'>wind speed</p> <i className=\"wi wi-strong-wind\"></i>  {DayOne.wind.speed}m/s</div>\r\n                    </div>\r\n\r\n                    <div className='lower-section__content'>\r\n                        <div> <p>humidity</p> <i className=\"wi wi-humidity\"></i> {DayOne.main.humidity}%</div>\r\n                        <div>  <p className='lower-section__item'>wind deg</p> <i className=\"wi wi-wind-direction\"></i> {(DayOne.wind.deg).toLocaleString('en-US')}°</div>\r\n                    </div>\r\n\r\n                    <div className='lower-section__content'>\r\n                        <div>  <p>visibility</p> <i className=\"far fa-eye\"></i> {(DayOne.visibility).toLocaleString('en-US')}km</div>\r\n                        <div>  <p className='lower-section__item'>pressure</p> <i className=\"wi wi-wind-direction\"></i> {DayOne.main.pressure}hPa</div>\r\n                    </div>\r\n                </section>\r\n            </motion.div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withRouter(DisplayInfo)\r\n\r\n\r\nconst pStyle1 = {\r\n    marginTop: '-22px',\r\n    textTransform: 'capitalize',\r\n    fontSize: '22px',\r\n    fontWeight: 'bold',\r\n    color: '#fff',\r\n    textShadow: '0 3px 6px rgb(59, 62, 65)',\r\n};\r\n\r\nconst time = {\r\n    fontFamily: 'Poppins',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    color: '#fff',\r\n    textShadow: '0 3px 6px rgba(0, 0, 0, .16), 0 1px 2px rgba(0, 0, 0, .23)',\r\n};\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport ChartistGraph from 'react-chartist';\r\n\r\n\r\n\r\n\r\nconst TemperatureChart = (forecast) => {\r\n\r\n    //======= Extracting the five days weather data  =========\r\n\r\n    const fiveDayForecast = () => {\r\n        let dailyForecast = []\r\n        for (let i = 0; i < forecast.list.length; i += 8) {\r\n            dailyForecast.push(forecast.list[i])\r\n        }\r\n        return dailyForecast\r\n    }\r\n\r\n\r\n    //======= Extracting date for plotting the Chart ==========\r\n\r\n    const date = () => {\r\n        let dateArr = []\r\n        fiveDayForecast().map((weather =>\r\n            dateArr.push(moment(weather.dt_txt).format(\"ddd\"))\r\n        ))\r\n        return dateArr\r\n    }\r\n\r\n    //======= Extracting max temperature for plotting the Chart ==========\r\n\r\n    const maxTemp = () => {\r\n        let maxTempArr = []\r\n        fiveDayForecast().map((weather =>\r\n            maxTempArr.push(Math.round(weather.main.temp_max))\r\n        ))\r\n        return maxTempArr\r\n    }\r\n\r\n    //======= Extracting min temperature for plotting the Chart ==========\r\n\r\n    const minTemp = () => {\r\n        let minTempArr = []\r\n        fiveDayForecast().map((weather =>\r\n            minTempArr.push(Math.round(weather.main.temp_min))\r\n        ))\r\n        return minTempArr\r\n    }\r\n\r\n  //======= data for ploting the chart ==========\r\n\r\n    const data = {\r\n\r\n        labels: date(),\r\n\r\n        series: [\r\n            minTemp(),\r\n            maxTemp()\r\n        ],\r\n    };\r\n\r\n\r\n    const options = {\r\n        width: '320px',\r\n        height: '140px',\r\n        showArea: true,\r\n        colors: 'nivo'\r\n    };\r\n\r\n\r\n    const chartWrapper = {\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        color: '#fff',\r\n        marginBottom: '10px',\r\n        textShadow: ' 0 3px 6px rgba(0, 0, 0, .16), 0 1px 2px rgba(0, 0, 0, .23)',\r\n        backgroundColor: 'rgba(255, 255, 255, .21)',\r\n    };\r\n    \r\n\r\n    return (\r\n\r\n        <div style={chartWrapper}>\r\n            <ChartistGraph data={data} options={options} type={'Line'} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TemperatureChart;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport moment from 'moment';\r\nimport TemperatureChart from './TemperatureChart';\r\nimport Thunder from '../animated/thunder.svg'\r\nimport Drizzle from '../animated/rainy-1.svg'\r\nimport Rain from '../animated/rainy-3.svg'\r\nimport Snow from '../animated/snowy-3.svg'\r\nimport Clear from '../animated/day.svg'\r\nimport Miscellaneous from '../animated/cloudy.svg'\r\nimport FewClouds from '../animated/cloudy-day-2.svg'\r\nimport ScatteredClouds from '../animated/cloudy-day-1.svg'\r\nimport OvercastClouds from '../animated/cloudy.svg'\r\nimport '../styles/displayforecast.css'\r\n\r\n\r\n\r\nconst DisplayForecast = (forecast) => {\r\n\r\n    //======= Navigation functions =========\r\n\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/displayinfo\");\r\n    }\r\n\r\n    //======= Extracting the five days weather data  ========\r\n\r\n    const fiveDayForecast = () => {\r\n        let dailyForecast = []\r\n        for (let i = 0; i < forecast.list.length; i += 8) {\r\n            dailyForecast.push(forecast.list[i])\r\n        }\r\n        return dailyForecast\r\n    }\r\n\r\n    /* ========= Replacing the default icons with animated icons from amcharts =========*/\r\n\r\n    const Avatar = (item) => {\r\n\r\n        if (item === '11d' || item === '11n') {\r\n            return Thunder;\r\n        }\r\n\r\n        else if (item === '09d' || item === '09n') {\r\n            return Drizzle;\r\n        }\r\n\r\n        else if (item === '10d' || item === '10n') {\r\n            return Rain;\r\n        }\r\n\r\n        else if (item === '13d' || item === '13n') {\r\n            return Snow;\r\n        }\r\n\r\n        else if (item === '50d' || item === '50n') {\r\n            return Miscellaneous;\r\n        }\r\n\r\n        else if (item === '01d' || item === '01n') {\r\n            return Clear;\r\n        }\r\n\r\n        else if (item === '02d' || item === '02n') {\r\n            return FewClouds;\r\n        }\r\n\r\n        else if (item === '03d' || item === '03n') {\r\n            return ScatteredClouds;\r\n        }\r\n\r\n        else if (item === '04d' || item === '04n') {\r\n            return OvercastClouds;\r\n        }\r\n\r\n        else {\r\n            return Clear;\r\n        }\r\n    }\r\n\r\n\r\n    /* ========= Mapping out the forecast details to display =========*/\r\n\r\n    const ShowForecast = fiveDayForecast().map(weather => (\r\n\r\n        <section className=\"data-section\" key={weather.dt_txt}>\r\n            <div className=\"data-section__wrapper\">\r\n                <div className='data-section__content'>\r\n                    <h5>{moment(weather.dt_txt).format(\"dddd\")}</h5>\r\n                    <h5>{moment(weather.dt_txt).format(\"Do MMM\")}</h5>\r\n                </div>\r\n                <div className='data-section__content'>\r\n                    <img src={Avatar(weather.weather[0].icon)} alt='img' />\r\n                </div>\r\n                <div className='data-section__content'>\r\n                    <h5>{(weather.weather[0].description)}</h5>\r\n                    <h5>{weather.main.humidity}%</h5>\r\n                </div>\r\n                <div className=\"data-section__content\">\r\n                    <h5> {Math.round(weather.main.temp_max)}°c</h5>\r\n                    <h5>{Math.round(weather.main.temp_min)}°c</h5>\r\n                </div>\r\n            </div>\r\n        </section>\r\n\r\n    ))\r\n\r\n\r\n    return (\r\n\r\n        <motion.div\r\n            initial={{ opacity: 0, scale: 1 }}\r\n            animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 1, scale: 1 }}\r\n            transition={{ type: \"tween\", duration: 0.5, ease: \"easeIn\" }}\r\n        >\r\n            <div className='display-forecast'>\r\n                <section className=\"graph-section\">\r\n                    <TemperatureChart {...forecast} />\r\n\r\n                    <span className='btn-direction'><i className=\"fas fa-arrow-down\"></i></span>\r\n                    <span><button type=\"button\" onClick={handleClick} className='btn-info'><h4>Get Today's Forecast</h4></button></span>\r\n\r\n                    <div style={{ textAlign: 'left', textShadow: 'text-shadow: 0 3px 6px rgba(0, 0, 0, .16), 0 1px', marginBottom: '-16px', color: '#1A237E', paddingTop: '2px' }}>\r\n                        <h4>{forecast.city.name}, {forecast.city.country} <span style={{ color: '#f65' }}>|</span> {Math.round(fiveDayForecast()[0].main.temp_max)}°c</h4>\r\n                    </div>\r\n                </section>\r\n                {ShowForecast}\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\n\r\nexport default withRouter(DisplayForecast);\r\n","import React from 'react'\r\n\r\nconst Form = () => {\r\n\r\n    return (\r\n\r\n        <>\r\n            <input type=\"checkbox\" id='display' />\r\n            <label htmlFor=\"form\" className='try'>\r\n                <form>\r\n                    <div className=\"form-content\">\r\n                        <input\r\n                            className='search-input'\r\n                            name='city'\r\n                            type='search'\r\n                            placeholder='Search City/Country...'\r\n                            autoComplete='on'\r\n                        />\r\n                        <button className='btn'><i className=\"fas fa-search\"></i>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </label>\r\n            <label htmlFor=\"display\">\r\n                <div className='show-btn'>\r\n                    <i className=\"fas fa-search\"></i>\r\n                </div>\r\n            </label>\r\n            <label htmlFor=\"display\">\r\n                <div className=\"logo\"> <span className=\"smile\">StBugyei&#9787;Weather</span> <span className=\"smile\"></span>\r\n                </div>\r\n            </label>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport '../styles/spinner.css'\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div className=\"spinner-position\">\r\n            <div className=\"spinner\">\r\n                <div className=\"spinner-text\">Searching</div>\r\n                <div className=\"spinner-sector spinner-sector-orange\"></div>\r\n                <div className=\"spinner-sector spinner-sector-lightblue\"></div>\r\n                <div className=\"spinner-sector spinner-sector-blue\"></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Switch, withRouter, useLocation } from \"react-router-dom\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\nimport Geolocation from './Geolocation'\r\nimport DisplayInfo from './DisplayInfo'\r\nimport DisplayForecast from './DisplayForecast'\r\nimport Form from './Form'\r\nimport Cloud from './../images/cloud.jpeg';\r\nimport Snow from './../images/snow.jpg';\r\nimport Rain from './../images/rain.jpg';\r\nimport Clear from './../images/clear2.jpg';\r\nimport Mist from './../images/mist.jpg';\r\nimport Storm from './../images/storm.jpg';\r\nimport Spinner from './Spinner'\r\n\r\n\r\n// const API_KEY = process.env.REACT_APP_API_KEY\r\n//const URL = '//api.openweathermap.org/data/2.5/'\r\nconst API_KEY = \"b2ef7b3ccbdb6c1a8cfc6cc6b959fd92\";\r\nconst FORECAST_URL = \"//api.openweathermap.org/data/2.5/forecast/?\"\r\n\r\n\r\nconst FetchWeather = () => {\r\n\r\n    const location = useLocation();\r\n\r\n    const [forecast, setForecast] = useState({});\r\n    const [icon, setIcon] = useState(null);\r\n    const [condition, setCondition] = useState();\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    //========= An async and await function to fetch default weather location =========\r\n    const fetchCurrentLocation = async (latitude, longitude) => {\r\n        const api_call = await fetch(`${FORECAST_URL}lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`),\r\n            result = await api_call.json();\r\n\r\n        try {\r\n            let dailyForecast = []\r\n            for (let i = 0; i < result.list.length; i += 8) {\r\n                dailyForecast.push(result.list[i])\r\n            }\r\n\r\n            setForecast(result);\r\n            //console.log(result)\r\n        }\r\n\r\n        catch (error) {\r\n            setError\r\n                (<><Spinner /><h4>Current Position Cannot be Found. Please do a Custom Search.</h4></>)\r\n        }\r\n    }\r\n\r\n\r\n    //========= Display default weather =========\r\n    useEffect(() => {\r\n        const showGeoLocation = async () => {\r\n            try {\r\n                if ('geolocation' in navigator) {\r\n                    navigator.geolocation.getCurrentPosition((position) => {\r\n                        fetchCurrentLocation(position.coords.latitude, position.coords.longitude);\r\n                    }, e => console.log(e));\r\n                }\r\n\r\n            } catch (error) {\r\n                setError\r\n                    (<><Spinner /><h4>Current Position Cannot be Found. Please do a Custom Search.</h4></>)\r\n            }\r\n        }\r\n       showGeoLocation();\r\n    }, []);\r\n\r\n    //========= conditions for searching through the API =========\r\n    const requestWeatherDetail = async (e) => {\r\n        e.preventDefault();\r\n        const query = e.target.city.value;\r\n\r\n        if (query) {\r\n\r\n            const weatherFeed = await fetch(`${FORECAST_URL}q=${query}&units=metric&APPID=${API_KEY}`),\r\n            responseForecast = await weatherFeed.json();\r\n\r\n            //====== Getting the five days forecast data array ======\r\n\r\n            try {\r\n                let dailyForecast = []\r\n                for (let i = 0; i < responseForecast.list.length; i += 8) {\r\n                    dailyForecast.push(responseForecast.list[i])\r\n                }\r\n                setForecast(responseForecast);\r\n                setCondition(dailyForecast[0].weather[0].main);\r\n                setError(null)\r\n\r\n            } catch (error) {\r\n                if (responseForecast.message === 429) {\r\n                    setError(\r\n                        <><Spinner /><h4 style={{ color: 'red' }}>{responseForecast.message}</h4></>\r\n                    );\r\n                } else {\r\n                    setError(\r\n                        <><Spinner /><h4>Weather Details For <span style={{ color: 'red' }}>{query}</span> Cannot be Found</h4></>\r\n                    );\r\n                }\r\n            }\r\n\r\n        } else {\r\n            setForecast({});\r\n            setIcon(null);\r\n            setError(<><Spinner /><h4>Please Enter City Or Country Name</h4></>\r\n            );\r\n        }\r\n    }\r\n\r\n    //========= conditions for changing the background image =========\r\n    const changeBackgroundImg = () => {\r\n\r\n\r\n        if (condition === 'Clouds') {\r\n            return Cloud\r\n\r\n        } else if (condition === 'Snow') {\r\n            return Snow\r\n        }\r\n\r\n        else if (condition === 'Rain') {\r\n            return Rain\r\n        }\r\n\r\n        else if (condition === 'Drizzle') {\r\n            return Rain\r\n        }\r\n\r\n        else if (condition === 'Thunderstorm') {\r\n            return Storm\r\n        }\r\n\r\n        else if (condition === 'Mist') {\r\n            return Mist\r\n        }\r\n\r\n        else if (condition === 'Fog') {\r\n            return Mist\r\n        }\r\n\r\n        else if (condition === 'condition') {\r\n            return Clear\r\n        }\r\n\r\n        return Clear\r\n    }\r\n\r\n   // console.log(location.key)\r\n   // console.log(forecast)\r\n\r\n    return (\r\n\r\n        <center>\r\n            <div className='weather_details' style={{ backgroundImage: `url(${changeBackgroundImg()})` }} >\r\n                <div className=\"search-wrapper\" onSubmit={requestWeatherDetail} >\r\n                    <Form />\r\n                </div>\r\n                {((forecast && Object.keys(forecast).length)) ? \r\n                    <AnimatePresence exitBeforeEnter initial={false}>\r\n                        <Switch location={location} key={location.pathname}>\r\n                             {/* <Redirect exact from=\"/\" to=\"/geolocation\" /> */}\r\n                            <Route exact path=\"/\">\r\n                                {!error ? <Geolocation  {...forecast} {...requestWeatherDetail} /> : error}\r\n                            </Route>\r\n\r\n                            <Route exact path=\"/displayinfo\">\r\n                                {!error ? <DisplayInfo {...forecast} {...requestWeatherDetail} /> : error}\r\n                            </Route>\r\n\r\n                            <Route exact path=\"/displayforecast\">\r\n                                {!error ? <DisplayForecast {...forecast} {...requestWeatherDetail} /> : error}\r\n                            </Route>\r\n                        </Switch>\r\n                    </AnimatePresence>\r\n                    : <span style={errormsg}>{error}{icon}</span>}\r\n            </div>\r\n        </center>\r\n    )\r\n}\r\n\r\nexport default withRouter(FetchWeather);\r\n\r\nconst errormsg = {\r\n    color: '#fff',\r\n    margin: '30px',\r\n    textAlign: 'center',\r\n};\r\n","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport FetchWeather from './component/FetchWeather'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter forceRefresh={true} basename={process.env.PUBLIC_URL + '/'}>\n      <FetchWeather />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}